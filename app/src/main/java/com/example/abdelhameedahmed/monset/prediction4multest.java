/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.example.abdelhameedahmed.monset;

/**
 *
 * @author sata
 */
public class prediction4multest {
    
    public static void main(String[] args) {
        double [] arr = new double[]{-43.017530543826695,33.90009849803853,-5.14635650517507,-4.246048112003274,5.325737227689854,1.4613680489327898,0.8401466288114077,3.9519883594819203,1.0381180343026954,0.18697182833400147,1.9067382497610785,2.812877339124873,-2.0044128327465183,1.0624202538513554,-0.1677648044143167,-0.1345157592896121,0.1873546175533561,0.03579176914633349,0.06294985191878537,0.18450714964793655,0.0833862066461681,0.06037735734743779,0.11428776606443006,0.11182769133826867,-1.6690207427750485,0.4093734846636537,-0.07725608297687755,-0.08646005830245908,0.05323270293593587,0.022140125642774955,0.05752158671091306,0.10719594373420811,0.02190001843062637,0.03807747821968752,0.10573087868365133,0.10634844235058188};
        System.out.println(new prediction4multest().getmaxresult(arr));
        
        
    }  
   
    public String getmaxresult(double [] input){
        double []result=new double[6];
        
        for (int i=0;i<new prediction4multest().getWeights().length;i++){
              double sum=0;
              for(int y = 0;y<input.length;y++){
                 sum+=input[y]*new prediction4multest().getWeights()[i][y];
              }     
              double s= 1/(1+Math.exp(-sum));
              result[i]=s;
        }
        
        String []s = new String[]{"babycry","breaking","doorKnock"};
        double maxValue = result[0];
        int index = 0;
        for(int i =0;i<result.length;i++){
            if (result[i]>maxValue){
                maxValue=result[i];
                index=i;
            }
        }

        prediction4multest p=new prediction4multest();
        if (s[index]=="doorKnock"){
                          double[] []res = new double[p.getArr4KNN().length][2];
                for (int ycounter=0 ; ycounter<p.getArr4KNN().length ; ycounter++){
                    double sum = 0.0;
                    for (int xcounter=0;xcounter<p.getArr4KNN()[ycounter].length-1 ; xcounter++){
                        sum+= Math.pow((input[xcounter]-p.getArr4KNN()[ycounter][xcounter]),2);
                       
                    }
                    sum=Math.sqrt(sum);
                   // System.out.println(sum);
                    res[ycounter][0]=sum;
                    res[ycounter][1]=p.getArr4KNN()[ycounter][input.length];
                }
          
                double temp=0;
                double temp1=0;
        
                for (int i=0;i<res.length;i++){
                    for (int y=0;y<res.length;y++){
                        if (res[i][0]<res[y][0]){
                            temp=res[y][0];
                            res[y][0]=res[i][0];
                            res[i][0]=temp;

                            temp1=res[y][1];
                            res[y][1]=res[i][1];
                            res[i][1]=temp1;

                        }
                    }
                }

                  double []finalRes = new double[3];
                 for (int i =0; i < 3; i++){
                     finalRes[i]=res[i][1];
                 } 
                  
                 int sil=0;
                 int breaking=0;
                         
                 for (int i = 0;i < finalRes.length; i++){
                   
                     if (finalRes[i]==0)
                         sil++;
                     
                     if (finalRes[i]==1)
                         breaking++;
                     
                 }
                 
                 if (sil>breaking){
                     return "silent";
                 }
                 else 
                     return "doorKnock";
        
        }


        else if (s[index]=="breaking"){
                          double[] []res = new double[p.getArr4KNN().length][2];
                for (int ycounter=0 ; ycounter<p.getArr4KNN().length ; ycounter++){
                    double sum = 0.0;
                    for (int xcounter=0;xcounter<p.getArr4KNN()[ycounter].length-1 ; xcounter++){
                        sum+= Math.pow((input[xcounter]-p.getArr4KNN()[ycounter][xcounter]),2);
                       
                    }
                    sum=Math.sqrt(sum);
                   // System.out.println(sum);
                    res[ycounter][0]=sum;
                    res[ycounter][1]=p.getArr4KNN()[ycounter][input.length];
                }
          
                double temp=0;
                double temp1=0;
        
                for (int i=0;i<res.length;i++){
                    for (int y=0;y<res.length;y++){
                        if (res[i][0]<res[y][0]){
                            temp=res[y][0];
                            res[y][0]=res[i][0];
                            res[i][0]=temp;

                            temp1=res[y][1];
                            res[y][1]=res[i][1];
                            res[i][1]=temp1;

                        }
                    }
                }

                  double []finalRes = new double[3];
                 for (int i =0; i < 3; i++){
                     finalRes[i]=res[i][1];
                 } 
                  
                 int sil=0;
                 int breaking=0;
                         
                 for (int i = 0;i < finalRes.length; i++){
                   
                     if (finalRes[i]==0)
                         sil++;
                     
                     if (finalRes[i]==1)
                         breaking++;
                     
                 }
                 
                 if (sil>breaking){
                     return "silent";
                 }
                 else 
                     return "breaking";
        
        }





        
        return s[index];
        
        
        
    }

    
    
    public double[][] getArr4KNN(){
        double [][]arr = new double[][]{{49.17121439913418,30.323993601647977,-4.088338628655659,-1.749089836705098,-0.014662505251555526,0.07173498629787144,-1.1555881243038593,-1.0998780223783537,1.3744702992847222,0.5403818694025367,-2.201559244516447,0.42494805620701404,3.194810656005246,2.0013223848166346,-0.2414451104640571,-0.0642135005245625,0.01317271639480185,0.07586948075704691,0.00445476775621339,-0.11050327489760671,-0.0013388433882955235,0.03333065919532676,-0.20897853716390802,0.026882045129283078,1.5297090559348636,0.9417802646688505,-0.09892374458728671,-0.08766159619677723,-0.021603223671770422,0.06567081868929653,0.09771992511730634,0.028807969899616502,0.015158385293234048,-0.014242007141480018,-0.2114622055426556,-0.008163086351535915,0},
            {53.72794126349554,21.61298061632274,-8.184049491666535,-1.619079333459067,-2.4148240712881486,-1.3495839330467059,-1.8524778881967867,-0.09887493451159797,-1.719107193122804,-0.7339085962794802,-0.5717750223229292,0.0678005066113442,1.8491971743992868,0.698276599870298,-0.23296688593211565,-0.0033922014760331713,-0.054130150965402975,-0.021131873634782406,-0.0931329242605898,-0.06060340417622148,-0.008604674930154646,-0.010920493215992694,-0.04556357230492366,-0.039517040192785076,1.0939490264004994,0.35014278453852726,-0.14824602669177078,-0.016142521023505732,-0.06300774351026289,-0.01590214492133216,-0.07982984032171114,-0.04704635875474,-0.003647497849276937,-0.005044728285022314,-0.012028642648067588,-0.04208854575824522,0},
            {63.45891668712518,19.42207244699982,-7.277673220010763,-1.7499529662765787,-2.910901016162777,-1.8528170619523268,-2.89630418671719,-0.6861657250076678,-2.230681169551163,-0.9019652517222227,-0.9602481867668254,-0.5158753243109674,2.3660360973878056,0.5996213436347893,-0.2940069683071686,-0.0581733708706364,-0.10961639115611116,-0.03557812451621727,-0.1592681154344049,-0.08377106247694913,-0.1061750328971062,-0.08911167192270047,0.014691083906626327,-0.051160312437186946,1.2841652828769745,0.2467975217534639,-0.1782736708852917,-0.05487307984152801,-0.08088149162419885,0.011355825556559179,-0.07564748514963507,-0.08113997163290111,-0.051864047781745456,-0.04790976159873522,0.03976359149714582,0.005091998934789518,0},
            {-75.60473849013952,-3.1307651656547324,3.110355497295408,0.043617211859994266,0.6774764407549199,0.14589224644710566,-0.6939016112454856,1.4977483487228562,-0.3132387446312204,1.4238199364051045,-0.014353149375803826,0.8623914758728948,-11.34319570395582,-0.5003658035504127,0.023488239428173,-0.014125901272152084,0.0018548356492744849,0.11699806022780865,-0.07313421144479258,0.06015351120676272,0.019773620990664438,-0.02109138298132183,0.018108665228882312,0.08221771601136221,21.856929244228947,-0.3843195982242182,0.06220408982618064,-0.008955420396150972,-0.0274942373233523,0.10941071373771283,-0.0267990712864683,0.02248586787273896,0.03306604594389045,0.002736263206993879,0.06547423096504604,0.08131452890560739,1},
            {-278.91615133573754,-12.712948577173643,-0.6788072430406598,0.7043297048511657,-1.4972349313890687,1.263271932530184,0.2990877253368092,0.55064177147317,-0.5944781087660184,0.027317921440738198,0.465611393132834,0.9426741385824464,-44.312648383436816,-0.01961789730981538,-0.061334744302182005,-0.01540636496272645,0.0011342971676639904,-0.00272951675163153,-0.015308175032641194,2.269089839257846E-4,0.009882814665451496,-0.021784931806477937,-0.0029486451965785774,-0.003768529843514709,-35.891192391689266,0.07437467173909987,0.03209432032786739,-0.011875954302993933,0.006436233555853117,-0.007720209686268509,0.002147273878948795,9.840893995727035E-4,-0.019206946551315614,0.01420772229444417,-0.0010016228153024683,2.3505026010201753E-4,1},
            {-50.82281458090784,-13.77182984977717,4.027477357192199,1.9833036338761807,-0.7091082923148538,1.485321329807771,1.3294606105564,-0.893472394410365,0.5302490943511302,1.4660380382713352,-0.5609109756347719,0.27260951150684887,-22.674409982850563,-0.7147977448137431,0.04886326810440764,0.4565259412796829,0.09464938296110682,-0.037508055240128346,0.25154286798384334,0.12687711781154218,0.02657022724849272,-0.017361977829512775,0.09729536898536029,-0.08516489507606664,-1.6089578828313262,-0.018028031748290752,0.15414636268662157,0.2679408738963936,0.03174457779398028,-0.04444223260287548,0.19362118976798703,0.11207013145467037,0.039551624428819106,0.025859307089116792,0.08430639175533208,-0.10747379071003145,1},
            {-30.906367952168594,-9.368025098110019,1.4264576118565735,2.414914161075086,-0.584231937234258,-0.849850748424267,-2.5448916434378557,-0.6943253527254805,-1.2640685318679379,0.08524346327926394,-0.5795994310246889,0.11742634884054624,-12.046874779250714,-0.7648022441715733,0.2954463646246786,0.20098398763316505,-0.14763127301104714,-0.0650543827611085,-0.06017758753229172,0.012795925710455076,-0.1205372105344334,-0.015298079949513266,-0.04374624367779584,0.03219657247607259,26.657093769198777,-0.5343783136843627,0.26652740839680383,0.1298698858194987,-0.1762001927765653,-0.05213187225538116,9.135900367928526E-4,0.023143819931247575,-0.10035500810169537,-0.007723366514614549,-0.037287752030710754,0.03068222140037487,1}}; 
    
    
    return arr;
    }
    
    
    
    
    
    
public double [][] getWeights(){
    
double [][] coefs = new double [][]{{



-0.0231667808723
,
-0.0696274919263
,
0.0277745899718
,
-0.174725536786
,
-0.153720700127
,
-0.373655248707
,
0.472227870547
,
-0.00352939371614
,
-0.0817890164584
,
-0.338183296387
,
0.245984029788
,
-0.827455276629
,
0.432010498889
,
0.110206957781
,
-0.00610158713575
,
-0.0530912072268
,
0.0311927393251
,
-0.00849521826641
,
0.0142392493062
,
-0.00988062428332
,
0.0080793606822
,
-0.0117726980301
,
0.001937232479
,
-0.0321565021138
,
-0.274980530419
,
0.000881559328633
,
0.0462148507896
,
-0.00435737848276
,
0.014955060328
,
-0.0155751760562
,
-0.0156175789488
,
-0.00572047245098
,
0.00961278268466
,
0.00749111995443
,
0.00515360463159
,
-0.0239546713233
},{
0.0542765530999
,
-0.164212448008
,
-0.18219595396
,
0.270619689568
,
0.241815204787
,
0.232805122208
,
-0.495749354051
,
-0.384488211912
,
0.22912893683
,
0.281754917352
,
-0.0740414168334
,
0.286228373135
,
-0.469174488199
,
-0.0289265574533
,
-0.0213112083493
,
0.0161807126448
,
-0.00109819789032
,
0.00340761780224
,
-0.00360709117328
,
-0.0104135784564
,
0.00428299652217
,
0.0151384075097
,
-0.00675645832363
,
3.25439079327e-05
,
0.096222247792
,
-0.0131633200484
,
-0.00736759490117
,
0.00643480554261
,
0.00516181924375
,
-0.00326688846497
,
0.00132185227729
,
-0.00454627189142
,
0.00170609123275
,
0.0102466251802
,
-0.00603079046051
,
0.00108454039008
},{
-0.0643638957015
,
0.218416194348
,
0.289355262532
,
-0.0871326205029
,
0.147841378336
,
0.0278396699606
,
-0.0518641994926
,
-0.0852882115825
,
0.0750376776101
,
-0.0692173866128
,
0.0177931850744
,
-0.08150937877
,
0.528756422804
,
0.0101236919638
,
0.0127592892583
,
-0.00457148931457
,
0.00557331926896
,
-0.000102470117586
,
-0.00265526480157
,
-0.00150206205327
,
0.0017136302026
,
0.000751785150352
,
0.00276001819964
,
-0.00415813562939
,
-0.124130987859
,
0.00667968857292
,
0.00571577738348
,
-0.00163841542626
,
0.0017194509625
,
-0.00146499748545
,
-0.00176016876885
,
0.000346049369626
,
0.00121006203297
,
-0.000122673347185
,
0.000972859437389
,
-0.0043354529414

}
    
        
        
};    
 

return coefs;

}

}
